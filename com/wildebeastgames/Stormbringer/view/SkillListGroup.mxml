<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 horizontalAlign="center"
		 >

	<fx:Script>
		<![CDATA[
			import controller.ItemRendererContainer;
			
			import model.Character;
			import model.Skill;
			import model.WeaponSkill;
			
			import mx.collections.ArrayList;
			
			import spark.components.CheckBox;
			import spark.events.IndexChangeEvent;
			
			[Bindable] public var context:String;
			[Bindable] public var character:Character;
			[Bindable] public var skillF:Function;
			
			private function SkillSort( a:ItemRendererContainer, b:ItemRendererContainer):int
			{
				// Sort Policy
				// incomplete is always higher than complete
				// for complete skills, alphabetic
				// for incomplete skills, sort by combat vs. non-combat then alphabetic
				var aSkill:Skill = a.dataObject as Skill;
				var bSkill:Skill = b.dataObject as Skill;

				if( aSkill.complete != bSkill.complete) {
					if( aSkill.complete)
						return 1;
					else
						return -1;
				}
				
				// both are either complete or incomplete
				if( aSkill.complete)
					return Skill.AlphaSort( aSkill, bSkill);
				
				// both are incomplete, put weapon first
				if( aSkill is WeaponSkill && !(bSkill is WeaponSkill))
					return -1;
				else if( !(aSkill is WeaponSkill) && bSkill is WeaponSkill)
					return 1;

				// either both are weapon or neither are weapon
				return Skill.AlphaSort( aSkill, bSkill);
			}

			protected function GetSkillListProvider( char:Character, con:String):ArrayList
			{
				var a:Array = new Array();
				
				if( char) {
					for each( var skill:Skill in char.skills) {
						var irc:ItemRendererContainer = new ItemRendererContainer( skill,
							context, character, DeleteSkill);
						if( skill != null)
							a.push( irc);
					}
					a.sort( SkillSort);
				}
				
				var result:ArrayList = new ArrayList( a);
				return result;
			}
			
			public function DeleteSkill( o:Object):void
			{
				var sk:Skill = o as Skill;
				
				if( sk && character)
					character.RemoveSkill( sk);
				
				skillsL.dataProvider = GetSkillListProvider( character, context);
				skillsL.selectedIndex = -1;
				skillsL.invalidateDisplayList();
			}
			
			protected function skillsL_clickHandler(event:MouseEvent):void
			{
				// use this instead of a change event so that we can handle
				// selecting the checkbox or delete button
				if( !( event.target is CheckBox) && skillsL.selectedIndex > -1) {
					var skill:Skill = skillsL.selectedItem.dataObject as Skill;
					
					if( skill != null && skillF != null)
						skillF( skill);
				}
			}
			
			public function Refresh():void
			{
				skillsL.dataProvider = GetSkillListProvider( character, context);
			}
		]]>
	</fx:Script>

	<s:Label styleName="titleLabelStyle" text="Skills"/>
	<s:List id="skillsL"
			styleName="skillsListStyle"
			dataProvider="{GetSkillListProvider( character, context)}"
			click="skillsL_clickHandler(event)"
			/>
</s:VGroup>
