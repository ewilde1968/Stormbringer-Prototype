<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="view.*"
		 width="100%" height="100%"
		 >
	<fx:Script>
		<![CDATA[
			import model.Character;
			import model.PhysicalItem;
			import model.Skill;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			
			[Bindable] private var complete:Boolean = false;
			private var _character:Character;

			// callbacks to context
			[Bindable] public var saveF:Function;
			[Bindable] public var doneF:Function;
			[Bindable] public var skillsF:Function;
			[Bindable] public var possessionsF:Function;
			[Bindable] public var descriptionF:Function;
			[Bindable] public var choiceF:Function;
			[Bindable] public var canSave:Boolean;

			public function get character():Character {return _character;}
			[Bindable] public function set character(c:Character):void
			{
				_character = c;
				complete = CheckComplete();
			}
			
			private function CheckComplete():Boolean
			{
				if( character) {
					for each( var sk:Skill in character.skills)
						if( sk && !sk.complete)
							return false;
					
					for each( var pi:PhysicalItem in character.possessions)
						if( pi && !pi.complete)
							return false;
				}
				
				return true;
			}
			
			private function IsComplete(a:Boolean, b:Boolean, c:Boolean):Boolean
			{
				// deal with the crazy trigger mechanism for Flex binding
				if( a && b && c) {
					setCurrentState( "CanSave");
					return true;
				}

				setCurrentState( "CannotSave");
				return false;
			}

			private function GenerateCharacter():Character
			{
				var result:Character = null;
				
				do {
					// Create a random character and let the user edit it as they wish
					result = Character.GenerateRandomCharacter( choiceF);
					
					// insert something into the while clause if you want a specific
					// type of character
				} while( false /*result.charClass[ "Farmer"] == null*/);

				return result;
			}

			protected function doneB_buttonDownHandler():void
			{
				if( doneF != null)
					doneF();
			}

			protected function saveB_buttonDownHandler():void
			{
				// First attempt to save. If that works then finalize and save again.
				character.Save();	// will throw on failure
				
				if( saveF != null)
					saveF();
			}
			
			public function SetupCharacter( c:Character):Character
			{
				character = !c ? GenerateCharacter() : c;
				complete = CheckComplete();
				
				charGroup.Refresh();
				
				return character
			}
		]]>
	</fx:Script>

	<fx:Binding destination="canSave"
				source="{IsComplete(complete,charGroup.nameValid, charGroup.cultValid)}"
				/>

	<s:states>
		<s:State name="CanSave"/>
		<s:State name="CannotSave"/>
	</s:states>

	<s:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
	</s:layout>

	<view:CharacterGroup id="charGroup"
						 character="{character}"
						 context="GenerateCharacter"
						 skillsF="{skillsF}"
						 possessionsF="{possessionsF}"
						 descriptionF="{descriptionF}"
						 />
	<s:HGroup horizontalAlign="center">
		<view:IconButton id="rerollB"
						 icon="@Embed('resources/dice-icon-64.png')"
						 buttonDown="{character = GenerateCharacter()}"
						 horizontalCenter="0"
						 />
		<s:Spacer width="60"/>
		<view:IconButton id="saveB"
						 icon.CanSave="@Embed('resources/Refresh-icon.png')"
						 icon.CannotSave="@Embed('resources/Apps-error-icon-64.png')"
						 buttonDown.CanSave="saveB_buttonDownHandler()"
						 buttonDown.CannotSave="doneB_buttonDownHandler()"
						 />
	</s:HGroup>
</s:Group>
